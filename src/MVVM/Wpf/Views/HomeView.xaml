<UserControl x:Class="MVVM.Wpf.Views.HomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vm="clr-namespace:MVVM.Core.ViewModels;assembly=MVVM.Core"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800" d:Background="Beige"
			       d:DataContext="{d:DesignInstance Type=vm:HomeViewModel}">
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>

    <Button Grid.Row="0" Content="Start" Margin="0 10 0 0" HorizontalAlignment="Left"
            Style="{StaticResource commonButtonStyle}" Command="{Binding NavigateServiceCommand}"/>

    <StackPanel Grid.Row="1" Margin="0 10 0 0" Orientation="Vertical" HorizontalAlignment="Left">
      <FlowDocumentReader BorderThickness="1" BorderBrush="Orange" Height="350">
        <FlowDocument FontFamily="{DynamicResource Common.FontFamily}" FontSize="{DynamicResource Common.FontSize}"
                      PagePadding="3" TextAlignment="Left" ColumnWidth="300">
          <Paragraph Margin="0,0,0,3">
            Welcome to the <Bold>MVVM WPF</Bold> test application, it demonstrates the following features:
          </Paragraph>
          <List Margin="0,0,0,6">
            <ListItem>
              <Paragraph>
                Model-View-ViewModel architecture
              </Paragraph>
            </ListItem>
            <ListItem>
              <Paragraph>
                Windows Presentation Foundation user interface
              </Paragraph>
            </ListItem>
            <ListItem>
              <Paragraph>
                Navigation features using Dependency Injection.
              </Paragraph>
            </ListItem>
            <ListItem>
              <Paragraph>
                Test data provided by the Common.Data component.
              </Paragraph>
            </ListItem>
          </List>
          <BlockUIContainer>
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="For more information see "/>
              <TextBlock>							
                <Hyperlink NavigateUri="https://kevindheath.github.io/tech/mvvm-wpf.html"
                           RequestNavigate="Hyperlink_RequestNavigate">References</Hyperlink>
              </TextBlock>
            </StackPanel>
          </BlockUIContainer>
          <Paragraph Margin="0,6,0,0">
            To get started, use the
            <Italic>Start</Italic> button and select a user to Login, or use the
						Navigation links to go to a specific view.
          </Paragraph>
          <Paragraph>
            <Bold>Model View ViewModel</Bold>
            <Italic>(MVVM)</Italic>
            is an architectural pattern used in software engineering that originated from Microsoft
						which is specialized in the Presentation Model design
						pattern. It is based on the Model-view-controller pattern (MVC), and is targeted at modern
						UI development platforms (UWP, WinForms, WPF, Xamarin, Uno, MAUI, and more) in which there is
						a UX developer who has different requirements than a more "traditional" developer. MVVM is a
						way of creating client applications that leverages core features of the WPF platform, allows
						for simple unit testing of application functionality, and helps developers and designers work
						together with less technical difficulties.
          </Paragraph>
          <BlockUIContainer>
            <Image Source="{StaticResource MVVMImage}" VerticalAlignment="Top" Width="300"/>
          </BlockUIContainer>
          <Paragraph>
            <Bold>MODEL:</Bold> Model is responsible for exposing data in a way that is easily
						consumable by WPF. It must implement INotifyPropertyChanged and/or INotifyCollectionChanged
						as appropriate. When data is expensive to fetch, it abstracts away the expensive operations,
						never blocking the UI thread. It is the data or business logic, completely UI independent,
						that stores the state and does the processing of the problem domain. The Model is written
						in code or is represented by pure data encoded in relational tables, JSON or XML.
          </Paragraph>
          <Paragraph>
            <Bold>VIEW:</Bold> A View is defined in XAML and should not have any logic in the
						code-behind. It binds to the view-model by only using data binding. The View contains the
						visual controls that will be shown to the user and can also contain animations, navigation
						aspects, themes, and other interactive features for the purpose of the visual presentation.
						The View is data bound directly to the Model. Parts of the Model are simply displayed in the
						view by one-way data binding. Other parts of the model can be edited by directly binding
						controls two-way to the data. It acts as a bridge between your software and its users.
          </Paragraph>
          <Paragraph>
            <Bold>VIEWMODEL:</Bold> A ViewModel is a model for a view in the application or we can say
						an abstraction of the view. It exposes data relevant to the view and exposes the behaviors
						for the views, usually with Commands. The ViewModel is the glue between the View and the
						outside world. The ViewModel is what the View is bound to. It provides a specialization of
						the Model that the View can use for data-binding.
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
    </StackPanel>
  </Grid>
</UserControl>